@model OpenXC.Web.Models.DeviceConfigurationViewModel

@{
    ViewBag.Title = "Send Configuration";
}

<h2>Send configuration to device @Model.DeviceName</h2>

@using (Html.BeginForm("Configuration", "Devices", FormMethod.Post, new { id = "configForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Configuration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Configuration, rows: 10, columns: 80, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Configuration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save configuration" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts {
    <script type="text/javascript">
        // Try to parse JSON and ensure the result is an object and not a literal.
        // See http://stackoverflow.com/a/20392392
        function tryParseJSON(jsonString) {
            try {
                var o = JSON.parse(jsonString);

                // Handle non-exception-throwing cases:
                // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
                // but... JSON.parse(null) returns 'null', and typeof null === "object", 
                // so we must check for that, too.
                if (o && typeof o === "object" && o !== null) {
                    return o;
                }
            }
            catch (e) { }

            return false;
        };

        $(document).ready(function () {
            $('#configForm').submit(function (e) {
                var configString = $("#Configuration").val();
                var parsed = tryParseJSON(configString);
                if (configString != null && configString != "" && parsed === false ) {
                    return confirm("Configuration does not appear to be valid JSON. Do you want to save it anyway?");
                }
                return true;
            })
        });
    </script>
}